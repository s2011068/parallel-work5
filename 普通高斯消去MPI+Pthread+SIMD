#include <iostream>
#include <sys/time.h>
#include "mpi.h"
#include<pthread.h>
#include<arm_neon.h>
#include<algorithm>
using namespace std;
const int N=6000;
const int worker_count=3;
float m[N][N];
void m_reset()
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<i;j++)
            m[i][j]=0;
        m[i][i]=1.0;
        for(int j=i+1;j<N;j++)
            m[i][j]=rand()%1000;
    }
    for(int k=0;k<N;k++)
        for(int i=k+1;i<N;i++)
            for(int j=0;j<N;j++)
                m[i][j]+=m[k][j];
}
typedef struct{
    int k;
    int t_id;
    int r1;
    int r2;
}threadParam_t;


void *threadFunc(void *param)
{
     threadParam_t *p=(threadParam_t*)param;
     int k=p->k;
     int t_id=p->t_id;
     int r1=p->r1;
     int r2=p->r2;
     int i=t_id+max(r1,k+1);
         int j;
   for(;i<=r2;i+=worker_count)
                {
                    float32x4_t vaik=vmovq_n_f32(m[i][k]);
        for(j=k+1;j+4<N;j+=4)
        {
            float32x4_t vakj=vld1q_f32(&m[k][j]);
            float32x4_t vaij=vld1q_f32(&m[i][j]);
            float32x4_t vx=vmulq_f32(vakj,vaik);
            vaij=vsubq_f32(vaij,vx);
            vst1q_f32(&m[i][j],vaij);
        }     
	for(;j<N;j++)
        {
            m[i][j]=m[i][j]-m[k][j]*m[i][k];
        }                       
                    m[i][k]=0;                    
                }
    pthread_exit(NULL);
}
int main(int argc,char *argv[])
{
    struct  timeval   tv_begin,tv_end;
    unsigned  long serial_time; 
    gettimeofday(&tv_begin,NULL);
    int myid,num;
    MPI_Status status;
    MPI_Init(&argc,&argv);
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
    MPI_Comm_size(MPI_COMM_WORLD,&num);
    int r1,r2;
    if(myid==num-1)
    {
        r1=(num - 1)*(N - N%num)/num;
        r2=N-1;
    }
    else
    {
        r1=myid*(N - N%num)/num;
        r2=(myid*(N - N%num)/num + (N - N%num)/num - 1);
    }
    
    if(myid==0)
    {
        m_reset();
        for(int j=1;j<num;j++)
        {
            MPI_Send(m,N*N,MPI_FLOAT,j,0,MPI_COMM_WORLD);
        }
        
    }
    else{
        MPI_Recv(m,N*N,MPI_FLOAT,0,0,MPI_COMM_WORLD,&status);
    }
              int k,j;
        for(k=0;k<N;k++)
          {
        if(r1<=k&&k<=r2)
        {
                     float32x4_t vt=vmovq_n_f32(m[k][k]);
            for(j=k+1;j+4<N;j+=4)
            {
                float32x4_t va=vld1q_f32(&m[k][j]);
                        va=vdivq_f32(va,vt);
                        vst1q_f32(&m[k][j],va);
            }
 	       for(;j<N;j++)
            {
                m[k][j]=m[k][j]/m[k][k];
            }
            m[k][k]=1.0;
            for(j=myid+1; j<num;j++)
            {
                 MPI_Send(&m[k][0],N,MPI_FLOAT,j,1,MPI_COMM_WORLD);
            }
            
        }
        else{
            int t=k/(N/num);
            if(t>=num)
            {
                t=num-1;
            }
            if(myid>=t)
            {
                       MPI_Recv(&m[k][0],N,MPI_FLOAT,t,1,MPI_COMM_WORLD,&status);
	    }
	}
        pthread_t* handles = new pthread_t[worker_count];
        threadParam_t* param = new threadParam_t[worker_count];
        for(int t_id=0;t_id<worker_count;t_id++)
        {
            param[t_id].k=k;
            param[t_id].t_id=t_id;
	       param[t_id].r1=r1;
             param[t_id].r2=r2;
        }
        for(int t_id=0;t_id<worker_count;t_id++)
        {
            pthread_create(&handles[t_id],NULL,threadFunc,(void *)&param[t_id]);
        }
        for(int t_id=0;t_id<worker_count;t_id++)
        {
            pthread_join(handles[t_id],NULL);
        }        
    }
    if(myid==0){    
        gettimeofday(&tv_end,NULL);
        serial_time=1000000*(tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"N:"<<N<<" mpi_time:"<<serial_time<<endl;
    }
    MPI_Finalize();
}
