#include <iostream>
#include <sys/time.h>
#include "mpi.h"
using namespace std;
const int N=5000;
float m[N][N];
void m_reset()
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<i;j++)
            m[i][j]=0;
        m[i][i]=1.0;
        for(int j=i+1;j<N;j++)
            m[i][j]=rand()%1000;
    }
    for(int k=0;k<N;k++)
        for(int i=k+1;i<N;i++)
            for(int j=0;j<N;j++)
                m[i][j]+=m[k][j];
}
int main(int argc,char *argv[])
{
    struct  timeval   tv_begin,tv_end;
    unsigned  long serial_time; 
    gettimeofday(&tv_begin,NULL);
    int myid,num;
    MPI_Status status;
    MPI_Init(&argc,&argv);
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
    MPI_Comm_size(MPI_COMM_WORLD,&num);
    if(myid==0)
    {
        m_reset();
        for(int j=1;j<num;j++)
        {
            MPI_Send(m,N*N,MPI_FLOAT,j,0,MPI_COMM_WORLD);
        }
        
    }
    else{
        MPI_Recv(m,N*N,MPI_FLOAT,0,0,MPI_COMM_WORLD,&status);
    }
    for(int k=0;k<N;k++)
    {
        if(k%num==myid)
        {
            for(int j=k+1;j<N;j++)
            {
                m[k][j]=m[k][j]/m[k][k];
            }
            m[k][k]=1.0;
            for(int i=k+num;i<N;i+=num)
            {
                for(int j=k+1;j<N;j++)
                {
                    m[i][j]=m[i][j]-m[k][j]*m[i][k];
                }
                m[i][k]=0;
                
            }
            for(int j=0; j<num;j++)
            {
                if(j!=myid)
                {
                    MPI_Send(&m[k][0],N,MPI_FLOAT,j,1,MPI_COMM_WORLD);
                }
            }
            
        }
        else{
            int t=k%num;
            MPI_Recv(&m[k][0],N,MPI_FLOAT,t,1,MPI_COMM_WORLD,&status);
            int temp;
            if(myid-t>0)
                temp=k+myid-t;
            else 
                temp=k+num+myid-t;
            for(int i=temp;i<N;i+=num)
            {
                for(int j=k+1;j<N;j++)
                {
                    m[i][j]=m[i][j]-m[k][j]*m[i][k];
                }
                m[i][k]=0;                   
            }
        }
    }
    if(myid==0)
    {
        gettimeofday(&tv_end,NULL);
        serial_time=1000000*(tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"N:"<<N<<" mpi2_time:"<<serial_time<<endl;
        
    }
    MPI_Finalize();
}
